substitutions:
  _REGION: "us-central1"
  _REPO: "devops-repo"
  _SERVICE_NAME: "devops-challenge"
  _HEALTH_CHECK_PATH: "/health"
  _SERVICE_URL: ""

steps:


  # 7. Health Check
  # This step fetches the Cloud Run URL and then curls its health endpoint
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Health Check Cloud Run'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Get the Cloud Run Service URL
        _SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)' \
          --project=${PROJECT_ID})

        echo "Cloud Run Service URL: ${_SERVICE_URL}"

        _HEALTH_URL="${_SERVICE_URL}${_HEALTH_CHECK_PATH}"
        _MAX_RETRIES=10
        _RETRY_INTERVAL=10 # seconds

        echo "Starting health check for ${_HEALTH_URL}"

        for i in $(seq 1 ${_MAX_RETRIES}); do
          echo "Attempt $i/${_MAX_RETRIES}: Curling ${_HEALTH_URL}..."
          # Use -f to fail silently on HTTP errors, -s for silent output, -o /dev/null to discard body
          curl -f -s -o /dev/null "${_HEALTH_URL}"
          _CURL_EXIT_CODE=$?

          if [ ${_CURL_EXIT_CODE} -eq 0 ]; then
            echo "Health check successful! (${_HEALTH_URL} returned HTTP 200)"
            exit 0 # Success
          else
            echo "Health check failed (exit code: ${_CURL_EXIT_CODE}). Retrying in ${_RETRY_INTERVAL} seconds..."
            sleep ${_RETRY_INTERVAL}
          fi
        done

        echo "Health check failed after ${_MAX_RETRIES} attempts."
        exit 1 # Failure
    #waitFor:
     # - 'Deploy to Cloud Run' # Ensure deployment is complete before health check

  # 8. Write Cloud Run URL to Job Summary
  # This uses the same method to get the URL and then pipes it to a Cloud Build-specific file
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Write Summary'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Get the Cloud Run Service URL again (can be done in a separate step or passed via artifact)
        _SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)' \
          --project=${PROJECT_ID})

        echo "---" > /workspace/_OUT.md # Start Markdown summary
        echo "## Deployment Summary" >> /workspace/_OUT.md
        echo "" >> /workspace/_OUT.md
        echo "Successfully deployed application to Cloud Run!" >> /workspace/_OUT.md
        echo "" >> /workspace/_OUT.md
        echo "**Service Name:** \`${_SERVICE_NAME}\`" >> /workspace/_OUT.md
        echo "**Region:** \`${_REGION}\`" >> /workspace/_OUT.md
        echo "" >> /workspace/_OUT.md
        echo "ðŸ”— **Service URL:** [${_SERVICE_URL}](${_SERVICE_URL})" >> /workspace/_OUT.md
        echo "" >> /workspace/_OUT.md
        echo "---" >> /workspace/_OUT.md

        # This command is what Cloud Build looks for to display the summary
        cat /workspace/_OUT.md
    waitFor:
      - 'Health Check Cloud Run' # Only write summary if health check passes


images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA'

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
