substitutions:
  _REGION: "us-central1"
  _REPO: "devops-repo"
  _SERVICE_NAME: "devops-challenge"

steps:
  # 1. Build and Test the Java application (using Maven in the app directory)
  - name: 'maven:3.9.6-amazoncorretto-17' # Use a Maven builder with Java 17
    id: 'Build and Test Java App'
    entrypoint: 'mvn'
    args: ['clean', 'install'] # 'install' also runs tests by default
    dir: 'app' # IMPORTANT: Execute Maven commands from the 'app' directory

  # 2. Build Docker image using the Dockerfile in the 'app' directory
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA',
      './app' # IMPORTANT: Tell Docker to look for Dockerfile and context in 'app'
    ]
  # 3. Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args: [
      'push',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA'
    ]

  # 4. Container vulnerability scan (fail on CRITICAL)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Scan image'
    entrypoint: 'bash'
    args:
      - -c
      - |
        # Explicitly install jq in this step to ensure it's available
        apt-get update && apt-get install -y jq

        echo "Scanning image: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA"

        # Initiate the on-demand scan. This command will wait for the scan operation to complete.
        # It does NOT directly output the vulnerability findings, but rather the operation metadata.
        gcloud artifacts docker images scan "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA" --remote

        echo "Scan operation completed. Now fetching detailed vulnerability occurrences from Container Analysis..."

        # Query Container Analysis for actual vulnerability occurrences linked to the image.
        # This is where the detailed vulnerability data resides after a scan.
        gcloud container analysis occurrences list \
            --resource-url="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA" \
            --filter='kind="VULNERABILITY"' \
            --format=json > vulnerability_occurrences.json

        # --- DEBUG STEP: Print the content of the vulnerability_occurrences.json file ---
        # This is helpful for debugging and can be removed once the pipeline is stable.
        echo "--- Content of vulnerability_occurrences.json ---"
        cat vulnerability_occurrences.json
        echo "---------------------------------------------------"
        # --- END DEBUG STEP ---

        # Check if the file was created and has content. If not, assume no critical/high issues.
        if [ ! -s vulnerability_occurrences.json ]; then
            echo "Warning: vulnerability_occurrences.json is empty or not created. This might mean no vulnerabilities were found, or an issue occurred during fetching."
           
        fi

        echo "Total Critical vulnerabilities found: $(jq -r '[.[] | select(.kind == "VULNERABILITY" and .vulnerability.details[].severity=="CRITICAL")] | length' vulnerability_occurrences.json)"
        #echo "Total High vulnerabilities found: $NUM_HIGH"

        if [ "$(jq -r '[.[] | select(.kind == "VULNERABILITY" and .vulnerability.details[].severity=="CRITICAL")] | length' vulnerability_occurrences.json)" -gt 0 ]; then
          echo "❌ CRITICAL vulnerabilities found. Failing build."
          # Print details for CRITICAL vulnerabilities for easier debugging
          jq '.[] | select(.kind == "VULNERABILITY" and .vulnerability.details[].severity=="CRITICAL")' vulnerability_occurrences.json
          exit 1 # <--- THIS LINE MAKES THE BUILD FAIL ON CRITICAL
        else
          echo "✅ No CRITICAL or HIGH vulnerabilities found."
        fi
  # --- END Container vulnerability scan ---
  
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/devops-challenge:$SHORT_SHA'

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
